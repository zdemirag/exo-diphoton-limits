[Variables]

# observable
mass = [1000.0, 200, 3000];
obs_set = set(mass);

# signal parameters
peak     = [2000.0, 200, 3000]; fix;
width_p0 = [-1.2979]; fix;
width_p1 = [0.0309338]; fix;

#AN-11-222 fig 18 as of Jul 7, 2011 confirmed by Jordan
#AN-11-472 table 9 as of Jan 8, 2012 same as jul 7
res_p0   = [0.009332]; fix;
res_p1   = [0.0000571]; fix;
res_p2   = [-0.000000001171]; fix;

# background parameters
# Nick Kypreos, July 7, 2011
#AN-11-472 table 9 as of Jan 8, 2012 same as jul 7
a = [-0.002423]; fix;
b = [-3.625]; fix;

# parameter of interest
ratio = [0.0, 0.0, 0.05]; float;

# other model parameters
#AN-11-472 as of Jan 8, 2012
# lumi     = [4964.00]; fix;
nbkg_est = [4250.0]; fix;
# background-subtracted: 680*2000
nz       = [1360000.0]; fix;


# exponent/eff_z
#AN-11-472 table 9 as of Jan 8, 2012 same as jul 7
# (0.001/0.27)
nsig_scale = [0.0037037]; fix;

# eff*acc SSM Z'
#AN-11-472 table 9 as of Jan 8, 2012 same as jul 7
# scale not needed for ratio
eff_scale = [1.0]; fix;
eff_a     = [0.85]; fix;
eff_b     = [-120000000.0]; fix;
eff_c     = [510.0]; fix;

# eff*acc KK graviton
eff_p0   = [0.901]; fix;
eff_p1   = [-830000.0]; fix;
eff_p2   = [-.0000188]; fix;

# systematics (lognormal)
# lumi_kappa = [1.045]; fix;
#AN-11-472 table 9 as of Jan 8, 2012 same as jul 7
nsig_kappa = [1.03]; fix;
nbkg_kappa = [1.20]; fix;
mass_kappa = [1.01]; fix;

# parameter of interest
poi_set = set(ratio);

# global observables
glob_nsig = [0,-3,3]; fix;
glob_nbkg = [0,-3,3]; fix;
glob_mass = [0,-3,3]; fix;
global_obs_set = set(glob_nsig, glob_nbkg);

# nuisance parameters
beta_nsig = [0,-3,3]; float;
beta_nbkg = [0,-3,3]; float;
beta_mass = [0,-3,3]; fix;
nuis_set  = set(beta_nsig, beta_nbkg);

# weight for loading data
weight = [1.0]; fix;

# dummy variables
# this is a workaround for the RooWorkspace limitation
# in resolving naming conflicts in embedded autogenerated
# code
res_c    = [0.901]; fix;
res_s    = [17.238]; fix;
res_n    = [0.0]; fix;



[Data]
# 4964/pb
data = root(dimuon,  'Dimuon data', data/alexander_lanyov_dimuons-m200_4964ipb_05jan2012v1.root, mass);





[Model]
# eff*acc SSM Z'
# (dummy to accomodate combination with dielectrons)
eff_dummy  = cexpr('eff_scale*(eff_a+eff_b/(peak+eff_c))', eff_scale, eff_a, eff_b, peak, eff_c);
eff  = cexpr('eff_scale*(eff_a+eff_b/(peak+eff_c)/(peak+eff_c)/(peak+eff_c))', eff_scale, eff_a, eff_b, peak, eff_c);

# signal yield + systematics
nsig_nuis = cexpr('pow(nsig_kappa,beta_nsig)', nsig_kappa, beta_nsig);
nsig = prod(nsig_scale, ratio, nz, eff, nsig_nuis);
syst_nsig = Gaussian(beta_nsig, glob_nsig, 1);

# background yield + systematics
nbkg_nuis = cexpr('pow(nbkg_kappa,beta_nbkg)', nbkg_kappa, beta_nbkg);
nbkg = prod(nbkg_est, nbkg_nuis);
syst_nbkg = Gaussian(beta_nbkg, glob_nbkg, 1);

# background shape
bkgpdf = CEXPR('exp(mass*a)*pow(mass,b)', mass, a, b);

# signal shape with resolution and energy scale
mass_nuis = cexpr('pow(mass_kappa,beta_mass)', mass_kappa, beta_mass);
mass_scaled = prod(mass, mass_nuis);
width       = sum(width_p0, prod(width_p1,peak));
sigma_rel   = sum(res_p0, prod(res_p1,peak), prod(prod(res_p2,peak),peak));
sigma_rel_dummy = cexpr('0.01*sqrt(res_s*res_s/peak + res_n*res_n/peak/peak + res_c*res_c)', res_s, peak, res_n, res_c);
sigma       = prod(sigma_rel, peak);
sigpdf      = Voigtian(mass_scaled, peak, width, sigma);

# extended S+B likelihood, single channel
model_core = SUM(nsig*sigpdf, nbkg*bkgpdf);

# full model pdf
model = PROD(model_core, syst_nsig, syst_nbkg);

# prior pdf
prior = Uniform(ratio);





[Model Config]
name                = mc
model               = model
observables         = obs_set
global_observables  = global_obs_set
poi                 = poi_set
nuisance_parameters = nuis_set
prior               = prior




[MCMC Calculator]
action_name             = mcmc
model_config            = mc
data                    = data
ph_cache_size           = 100
confidence_level        = 0.95
left_side_tail_fraction = 0.0
n_bins                  = 100
burn_in_steps           = 500
number_of_iterations    = 10000
make_posterior_plot     = True

# 10000 iter, 500 burn in, 4.96/fb
#   130s, peak = 2000 GeV
#   94s, peak =  400 GeV
#
# 10000 iter, 500 burn in, 4.96/4.6fb combined
#   528s, peak = 1500 GeV
#   590s, peak =  400 GeV
#
# Z' limits between [1700,2150]
# GR limits between [1600,2000]
# Combined Z'       [1950,2300]
# Combined GR       [1800,2150]
#
# assuming 50K iter calculations, ~6 per hour, ~50 per 8 hour
#   want 100 calculations to average over, per mass point
#   run 50 calc per job (~8 hours each)
#   300-2500 with 50 GeV step: 45*2 jobs
#   1600-2250 with 50 GeV step: 14*2 jobs (for Z' mass limits)
#   1500-2100 with 50 GeV step: 13*2 jobs (for GR mass limits)
#
# combined
# assuming 50K iter calculations, ~10 per 8 hour job
#   want 50 calculations to average over, per mass point
#   run 10 calc per job (~8 hours each)
#    300-2500 with 50 GeV step: 45*5 = 225 jobs
#   1850-2400 with 50 GeV step: 12*4 =  48 jobs (for Z' mass limits)
#   1700-2250 with 50 GeV step: 12*4 =  48 jobs (for GR mass limits)
