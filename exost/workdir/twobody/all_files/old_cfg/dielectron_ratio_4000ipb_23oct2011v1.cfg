[Variables]

# observable
mass = [1000.0, 200, 3000];
obs_set = set(mass);

# signal parameters
peak     = [400.0, 200, 3000]; fix;
width_p0 = [-1.2979]; fix;
width_p1 = [0.0309338]; fix;

# resolution
# July 8, 2011, Vladlen
# all ECAL
res_c    = [1.671]; fix;
res_s    = [14.535]; fix;
res_n    = [95.656]; fix;
# resolution
# June 22, 2011, Vladlen
# all ECAL
#res_c    = [1.624]; fix;
#res_s    = [14.536]; fix;
#res_n    = [95.646]; fix;
# EB-EB
#res_c    = [1.508]; fix;
#res_s    = [9.322]; fix;
#res_n    = [110.141]; fix;
# EB-EE
#res_c    = [2.241]; fix;
#res_s    = [4.341]; fix;
#res_n    = [205.332]; fix;

# background parameters
# Sam Harper, June 22, 2011
# all ECAL
a = [-0.002268]; fix;
b = [-3.717]; fix;
# EB-EB
#a = [-0.001968]; fix;
#b = [-3.686]; fix;
# all EB_EE
#a = [-0.003865]; fix;
#b = [-3.221]; fix;

# parameter of interest
ratio = [0.0, 0.0, 0.17]; float;

# other model parameters
# update 23 oct 2011, scaled by lumi from 2.5/fb->4.0/fb, scale=1.6
#lumi     = [2500.0]; fix;
nbkg_est = [2862.0]; fix;
nz       = [513269.0]; fix;

# exponent/eff_z (0.001/0.123)
# Sam Harper, June 22, 2011
# Ditto AN-11-159, July 8, 2011
nsig_scale = [0.008130]; fix;

# eff*acc SSM Z'
# Sam Harper, June 22, 2011
# AN-11-159, July 8, 2011
# scale not needed for ratio
eff_scale = [1.0]; fix;
#eff_scale = [1.02]; fix;
eff_a     = [0.7558]; fix;
eff_b     = [-109.3]; fix;
eff_c     = [83.32]; fix;

# systematics (lognormal)
# JP forwarded email by Dan Marlow June 22, 2011
#lumi_kappa = [1.06]; fix;
# Sam Harper, AN-11-159, July 8, 2011
nsig_kappa = [1.08]; fix;
nbkg_kappa = [1.15]; fix;
mass_kappa = [1.01]; fix;

# parameter of interest
poi_set = set(ratio);

# global observables
nom_nsig_nuis = [1.0, 0.1, 1.9]; fix;
nom_nbkg_nuis = [1.0, 0.1, 1.9]; fix;
nom_mass_nuis = [1.0, 0.1, 1.9]; fix;
global_obs_set = set(nom_nsig_nuis, nom_nbkg_nuis);

# nuisance parameters
nsig_nuis = [1.0, 0.3, 1.7]; float;
nbkg_nuis = [1.0, 0.0, 2.0]; float;
mass_nuis = [1.0, 0.9, 1.1]; float;
nuis_set  = set(nsig_nuis, nbkg_nuis, mass_nuis);

# weight for loading data
weight = [1.0]; fix;

# dummy variables
eff_p0   = [0.901]; fix;
eff_p1   = [-830000.0]; fix;
eff_p2   = [-.0000188]; fix;





[Data]
# 2.5/fb, 30 Sep 2011
#data = root(eleDataTree, 'Dielectron data', update_30sep2011/samsSelectedEvents2500pb_28sep2011v1.root, mass, weight);

# 3.2/fb, 23 Oct 2011
#data = root(eleDataTree, 'Dielectron data', data/samsSelectedEvents3200pb_14oct2011v1.root, mass, weight);

# 4.0/fb, 23 Oct 2011
data = root(eleDataTree, 'Dielectron data', data/samsSelectedEvents4000pbMassOnly_23oct2011v1.root, mass, weight);




[Model]
# eff*acc SSM Z'
eff  = cexpr('eff_scale*(eff_a+eff_b/(peak+eff_c))', eff_scale, eff_a, eff_b, peak, eff_c);
# dummy to accomodate combination with dimuons
eff_dummy = cexpr('eff_scale*(eff_a+eff_b/(peak+eff_c)/(peak+eff_c)/(peak+eff_c))', eff_scale, eff_a, eff_b, peak, eff_c);

# signal yield
nsig = prod(nsig_scale, ratio, nz, eff, nsig_nuis);

# background yield
nbkg = prod(nbkg_est, nbkg_nuis);

# background shape
bkgpdf = CEXPR('exp(mass*a)*pow(mass,b)', mass, a, b);

# bg shape cross checks
#bkgpdf = Uniform(mass);
#bkgpdf = SUM::bkgpdf(fbkg_flat[0,0,1]*Uniform::bkg_flat(mass),CEXPR::bkg_nom('exp(mass*a)*pow(mass,b)', mass, a, b));
#bkgpdf_core = CEXPR('exp(mass*a)*pow(mass,b)', mass, a, b);
#bkgpdf_flat = Uniform(mass);
#bkgpdf = SUM::bkgpdf(fbkg_flat[0.0,0.0,0.1]*bkgpdf_flat,bkgpdf_core);
#syst_flat = Uniform(fbkg_flat);


# signal shape with resolution and energy scale
mass_scaled = prod(mass, mass_nuis);
width       = sum(width_p0, prod(width_p1,peak));
sigma_rel   = cexpr('0.01*sqrt(res_s*res_s/peak + res_n*res_n/peak/peak + res_c*res_c)', res_s, peak, res_n, res_c);
sigma       = prod(sigma_rel, peak);
sigpdf      = Voigtian(mass_scaled, peak, width, sigma);

# extended S+B likelihood, single channel
model_core = SUM(nsig*sigpdf, nbkg*bkgpdf);

# systematics PDFs
syst_nsig = Lognormal(nsig_nuis, nom_nsig_nuis, nsig_kappa);
syst_nbkg = Lognormal(nbkg_nuis, nom_nbkg_nuis, nbkg_kappa);
syst_mass = Lognormal(mass_nuis, nom_mass_nuis, mass_kappa);

# full model pdf
model = PROD(model_core, syst_nsig, syst_mass);

# prior pdf
prior_ratio = Uniform(ratio);
prior = PROD(prior_ratio, syst_nbkg);
#prior = PROD(prior_ratio, syst_nbkg, syst_flat);





[Model Config]
name                = mc
model               = model
observables         = obs_set
global_observables  = global_obs_set
poi                 = poi_set
nuisance_parameters = nuis_set
prior               = prior




[MCMC Calculator]
action_name             = mcmc
model_config            = mc
data                    = data
ph_cache_size           = 100
confidence_level        = 0.95
left_side_tail_fraction = 0.0
n_bins                  = 100
burn_in_steps           = 500
number_of_iterations    = 10000
make_posterior_plot     = True

# 10000 iter, 500 burn in, 3.97/fb
# 0.0012, 89s, peak = 1500 GeV
# 0.022, 110s, peak =  400 GeV
#
# Z' limits between [1800,2100]
# GR limits between [1550,1950]
#
# assuming 50K iter jobs, ~6.5 per hour, ~50 per 8 hour job (should run 50 as in mumu)
#   run 50 calc per job (~8 hours each)
#   300-2500 with 50 GeV step: 45 jobs
#   1700-2200 with 50 GeV step: 11 jobs (for Z' mass limits)
#   1450-2050 with 50 GeV step: 13 jobs (for GR mass limits)