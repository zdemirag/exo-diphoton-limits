[Variables]

# observable     
mass = [1000.0, 300, 4000]; 
obs_set = set(mass);

# signal parameters -- BW width for 01
peak     = [2000.0, 200, 4000]; fix;
#width_p0 = [0.375]; fix;
#width_p1 = [0.01402]; fix;

#c=001
width_p0 = [0.03765]; fix;
width_p1 = [0.000128]; fix;

#c=005
#width_p0 = [0.02187]; fix;
#width_p1 = [0.003549]; fix;

# diphoton mass resolution - mass scale
res_a    = [116.2]; fix;
res_b    = [3.044]; fix;
res_c    = [-1.226]; fix;

# background fit parameters  
#a = [0.002295]; fix;
#b = [10.92]; fix;
#c = [4.112]; fix;
#d = [0.04928]; fix;

a = [0.001674]; fix;
b = [10.57]; fix;
c = [4.299]; fix;
d = [0.07318]; fix;


# eff*acc RS Graviton
eff_scale = [1.0]; fix;
eff_a     = [-7.841]; fix;
eff_b     = [-0.0002944]; fix;

# parameter of interest  Signal x-sec
#ratio = [0.0, 0.0, 0.00185]; float;
ratio = [0.0, 0.0, 0.05]; float;

# other model parameters
lumi     = [19620.0]; fix;
nbkg_est = [1479.35]; fix;
nz       = [19620.0]; fix; 

nsig_scale = [1.0]; fix;

# systematics (lognormal)
nsig_kappa = [1.065]; fix;
nbkg_kappa = [1.16]; fix;
nbkg_kappa_b = [1.16]; fix;
nbkg_kappa_m = [0.0]; fix;
nbkg_kappa_msquared = [0.0]; fix;
mass_kappa = [1.0]; fix;

# parameter of interest
poi_set = set(ratio);

# global observables
glob_nsig = [0,-5,5]; fix;
glob_nbkg = [0,-5,5]; fix;
glob_mass = [0,-5,5]; fix;
global_obs_set = set(glob_nsig, glob_nbkg, glob_mass);

# nuisance parameters
beta_nsig = [0,-5,5]; float;
beta_nbkg = [0,-5,5]; float;
beta_mass = [0,-5,5]; float;
nuis_set  = set(beta_nsig, beta_nbkg, beta_mass);

# weight for loading data
weight = [1.0]; fix;

[Data]

data = root(T, 'Diphoton data', data/histograms_ExoDiPhotonAnalyzer_PFDec14th_DataABCD_ZEYNEP.root, mass);

[Model]
# eff*acc RS Graviton
eff = cexpr('peak*exp(eff_a+eff_b*peak)',peak,eff_a,eff_b);
eff_dummy1 = cexpr('peak*exp(eff_a+eff_b*peak)',peak,eff_a,eff_b);
eff_dummy2 = cexpr('peak*exp(eff_a+eff_b*peak)',peak,eff_a,eff_b);

# background shape
bkgpdf = CEXPR('(a*pow((1-mass/8000),b)) / pow(mass/8000,c+d*log(mass/8000))',a,mass,b,c,d);
bkgpdf_dummy = CEXPR('(pow(a*(1-mass/8000),b)) / pow(mass/8000,c+d*log(mass/8000))',a,mass,b,c,d);

# signal yield + systematics
nsig_nuis = cexpr('pow(nsig_kappa,beta_nsig)', nsig_kappa, beta_nsig);
nsig = prod(nsig_scale, ratio, nz, eff, nsig_nuis);
syst_nsig = Gaussian(beta_nsig, glob_nsig, 1);

# background yield + systematics
nbkg_nuis = cexpr('pow(nbkg_kappa_b+nbkg_kappa_m*mass+nbkg_kappa_msquared*mass*mass,beta_nbkg)', nbkg_kappa_b, nbkg_kappa_m, mass, nbkg_kappa_msquared, beta_nbkg);
nbkg_nuis_dummy_dimuon = cexpr('pow(nbkg_kappa,beta_nbkg)', nbkg_kappa, beta_nbkg);
nbkg = prod(nbkg_est, nbkg_nuis);
syst_nbkg = Gaussian(beta_nbkg, glob_nbkg, 1);


# signal shape with resolution and energy scale
mass_nuis = cexpr('pow(mass_kappa,beta_mass)', mass_kappa, beta_mass);
mass_scaled = prod(mass, mass_nuis);
width       = sum(width_p0, prod(width_p1,peak));
sigma_rel              = cexpr('0.01*sqrt(res_a*res_a/peak/peak + res_b*res_b/peak + res_c*res_c)', res_a, peak, res_b, res_c);

sigma_rel_dummy_ebee              = cexpr('0.01*sqrt(res_a*res_a/peak/peak + res_b*res_b/peak + res_c)', res_a, peak, res_b, res_c);
sigma_rel_dummy_dimu              = cexpr('0.01*sqrt(res_a*res_a/peak/peak + res_b*res_b/peak + res_c)', res_a, peak, res_b, res_c);
sigma       = prod(sigma_rel, peak);
sigpdf      = Voigtian(mass_scaled, peak, width, sigma);
syst_mass   = Gaussian(beta_mass, glob_mass, 1);

# extended S+B likelihood, single channel
model_core = SUM(nsig*sigpdf, nbkg*bkgpdf);

# full model pdf
model = PROD(model_core, syst_nsig, syst_nbkg, syst_mass);

# prior pdf
prior = Uniform(ratio);



[Model Config]
name                = mc
model               = model
observables         = obs_set
global_observables  = global_obs_set
poi                 = poi_set
nuisance_parameters = nuis_set
prior               = prior


[MCMC Calculator]
action_name             = mcmc
model_config            = mc
data                    = data
ph_cache_size           = 100
confidence_level        = 0.95
left_side_tail_fraction = 0.0
n_bins                  = 100
burn_in_steps           = 500
number_of_iterations    = 10000
make_posterior_plot     = True